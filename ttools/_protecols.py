from typing import Any, Protocol, TypeVar


class Addable[T](Protocol):
    def __add__(self: T, other: T) -> T: ...


class SupportsRichComparison(Protocol):
    def __lt__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...


class SupportsAllComparison(Addable, Protocol):
    def __le__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...


SupportsRichComparisonT = TypeVar("SupportsRichComparisonT", bound=SupportsRichComparison)
SupportsAllComparisonT = TypeVar("SupportsAllComparisonT", bound=SupportsAllComparison)
